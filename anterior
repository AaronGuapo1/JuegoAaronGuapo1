var config = {
    type: Phaser.AUTO,
    width: 800,
    height: 600,
    physics: {
      default: "arcade",
      arcade: {
        gravity: { y: 300 },
        debug: false
      }
    },
    scene: {
      preload: preload,
      create: create,
      update: update
    }
  };
  
  var player;
  var nashit;
  var nashit2;
  var nashit3;
  var stars;
  var bombs;
  var platforms;
  var cursors;
  var score = 0;
  var gameOver = false;
  var scoreText;
  
    var game = new Phaser.Game(config);
    
    function preload() {
        this.load.image(
        "sky",
        "https://labs.phaser.io/src/games/firstgame/assets/sky.png"
        );
        this.load.image(
        "ground",
        "https://labs.phaser.io/src/games/firstgame/assets/platform.png"
        );
        this.load.image("star", "/3380800-starcoin.png");

        this.load.image("bomb", "./bomb.png");

        this.load.image("nashi", "./nashit.png");
        this.load.image("nashi2", "./nashit2.png");
        this.load.image("nashi3", "./nashit3.png");

        this.load.spritesheet(
        "dude",
        "./dude.png",
        { frameWidth: 32, frameHeight: 48 }
        );
        //https://labs.phaser.io/src/games/firstgame/assets/dude.png
    }
    
    function create() {

        //  A simple background for our game
        this.add.image(400, 300, "sky");
    
        //  The platforms group contains the ground and the 2 ledges we can jump on
        platforms = this.physics.add.staticGroup();
    
        //  Here we create the ground.
        //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
        platforms
        .create(400, 568, "ground")
        .setScale(2)
        .refreshBody();
    
        //  Now let's create some ledges
        platforms.create(600, 400, "ground");
        platforms.create(50, 250, "ground");
        platforms.create(750, 220, "ground");
    
        // The player and its settings
        player = this.physics.add.sprite(100, 450, "dude");


        //  Player physics properties. Give the little guy a slight bounce.
        player.setBounce(0.2);
        player.setCollideWorldBounds(true);



        //  Our player animations, turning, walking left and walking right.
        this.anims.create({
        key: "left",
        frames: this.anims.generateFrameNumbers("dude", { start: 0, end: 3 }),
        frameRate: 10,
        repeat: -1
        });
    
        this.anims.create({
        key: "turn",
        frames: [{ key: "dude", frame: 4 }],
        frameRate: 20
        });
    
        this.anims.create({
        key: "right",
        frames: this.anims.generateFrameNumbers("dude", { start: 5, end: 8 }),
        frameRate: 10,
        repeat: -1
        });

          
        //  Input Events
        cursors = this.input.keyboard.createCursorKeys();
    
        //  Some stars to collect, 12 in total, evenly spaced 70 pixels apart along the x axis
 // Create the stars group
 stars = this.physics.add.group({
    key: "star",
    repeat: 11,
    setXY: { x: 12, y: 0, stepX: 70 }



  });

  // Set the scale of each star to 0.5 (or any desired scale)
  stars.children.iterate(function(child) {
    child.setScale(0.1);
    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
  });
    
        bombs = this.physics.add.group();
        
        nashit = this.physics.add.group();
        nashit2 = this.physics.add.group();
        nashit3 = this.physics.add.group();

        //  The score
        scoreText = this.add.text(16, 16, "score: 0", {
        fontSize: "32px",
        fill: "#000"
        });
    
        //  Collide the player and the stars with the platforms
        this.physics.add.collider(player, platforms);
        this.physics.add.collider(stars, platforms);
        this.physics.add.collider(bombs, platforms);
        this.physics.add.collider(nashit, platforms);
        this.physics.add.collider(nashit2, platforms);
        this.physics.add.collider(nashit3, platforms);

        //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
        this.physics.add.overlap(player, stars, collectStar, null, this);
        this.physics.add.collider(player,bombs, hitBomb, null, this);

        this.physics.add.collider(player,nashit, hitNashi, null, this);
        this.physics.add.collider(player,nashit2, hitNashi2, null, this);
        this.physics.add.collider(player,nashit3, hitNashi3, null, this);

    }  // ,,
  
  function update() {
    if (gameOver) {
      return;
    }
  
    if (cursors.left.isDown) {
      player.setVelocityX(-160);
  
      player.anims.play("left", true);
    } else if (cursors.right.isDown) {
      player.setVelocityX(160);
  
      player.anims.play("right", true);
    } else {
      player.setVelocityX(0);
  
      player.anims.play("turn");
    }
  
    if (cursors.up.isDown && player.body.touching.down) {
      player.setVelocityY(-330);
    }
  }
  var nashiCreated = false; // variable to keep track if nashi has been created


  function collectStar(player, star) {
    star.disableBody(true, true);
  
    //  Add and update the score
    score += 10;
    scoreText.setText("Score: " + score);
  
    if (stars.countActive(true) === 0) {
      //  A new batch of stars to collect
      stars.children.iterate(function(child) {
        child.enableBody(true, child.x, 0, true, true);
      });

      var x =
        player.x < 400
          ? Phaser.Math.Between(400, 800)
          : Phaser.Math.Between(0, 400);

      var bomb = bombs.create(x, 16, "bomb");
      bomb.setBounce(1);
      bomb.setCollideWorldBounds(true);
      bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);
      bomb.allowGravity = false;



      nashit.scene.events.on("update", function() {
        if (!nashiCreated) { // check if nashi has not been created yet
          var nashi = nashit.create(game.config.width, 510, "nashi"); // create nashi
          nashiCreated = true; // set nashiCreated to true
          nashi.setBounce(1);
          nashi.setCollideWorldBounds(true);
          nashi.body.checkCollision.up = true;
          nashi.body.checkCollision.down = false;
          nashi.body.checkCollision.left = true;
          nashi.body.checkCollision.right = true;
          nashi.setVelocityX(-100); // negative velocity in x-direction
          nashi.body.allowGravity = false;
      
          var distance = 20000; // distance to move in pixels
          var counter = 0; // counter variable to keep track of distance moved
          var direction = -1; // direction of movement
      
          nashit.scene.events.on("update", function(){
              if (counter < distance) {
                  nashi.setVelocityX(-100 * direction); // keep moving left or right depending on direction
                  counter += Math.abs(nashi.body.velocity.x); // increment counter with absolute velocity
              } else {
                  direction = -direction; // change direction
                  counter = 0; // reset counter
              }
          }, this);
        }
      }, this);
      

    }
  }
  function shootBullet(player) {
    var bullet = bullets.create(player.x, player.y, 'bullet');
    bullet.setVelocityX(1000);
    bullet.setScale(0.5);
    
    this.physics.add.collider(bullet, platforms, function() {
      bullet.destroy();
    });
    
    this.physics.add.collider(bullet, bombs, function(bullet, bomb) {
      bullet.destroy();
      bomb.destroy();
    });
    
    this.physics.add.overlap(bullet, nashit, function(bullet, nashi) {
      bullet.destroy();
      nashi.disableBody(true, true);
    });
    
    this.physics.add.overlap(bullet, nashit2, function(bullet, nashi) {
      bullet.destroy();
      nashi.disableBody(true, true);
    });
    
    this.physics.add.overlap(bullet, nashit3, function(bullet, nashi) {
      bullet.destroy();
      nashi.disableBody(true, true);
    });
  }
  
 
  function hitBomb(player, bomb) {
    this.physics.pause();
  
    player.setTint(0xff0000);
  
    player.anims.play("turn");
    //prompt("Introduce tu nombre para guardar tu puntuación")
    const FinalScore = score;
    gameOver = true;

    var nombre = prompt("¡Introduce tu nombre para guardar tu puntuación!")

    document.getElementById("score").innerHTML = FinalScore;

    document.getElementById("task-stats").value = FinalScore;
    document.getElementById("nombre").innerHTML = nombre;

    document.getElementById("task-title").value = nombre;
    
    document.getElementById("btn-task-form").click();


  }

  function hitNashi(player, nashi) {
    this.physics.pause();
  
    player.setTint(0xff0000);
  
    player.anims.play("turn");
    //prompt("Introduce tu nombre para guardar tu puntuación")
    const FinalScore = score;
    gameOver = true;

    var nombre = prompt("¡Introduce tu nombre para guardar tu puntuación!")

    document.getElementById("score").innerHTML = FinalScore;

    document.getElementById("task-stats").value = FinalScore;
    document.getElementById("nombre").innerHTML = nombre;

    document.getElementById("task-title").value = nombre;
    
    document.getElementById("btn-task-form").click();


  }
